<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.cppreference.com/w/cpp/language/declarations by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 08 Feb 2014 15:07:13 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<title>Declarations - cppreference.com</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.21.2" />
<link rel="alternate" type="application/x-wiki" title="Edit" href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=edit" />
<link rel="edit" title="Edit" href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=edit" />
<link rel="shortcut icon" href="../../../favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="../../../mwiki/opensearch_desc.php" title="cppreference.com (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.cppreference.com/mwiki/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="http://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="../../../mwiki/loadfe52.css?debug=false&amp;lang=en&amp;modules=ext.gadget.ColiruCompiler%7Cext.rtlcite%7Cmediawiki.legacy.commonPrint%2Cshared%7Cskins.cppreference2&amp;only=styles&amp;skin=cppreference2&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="../../../mwiki/load7fe1.css?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=cppreference2&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>

<script src="../../../mwiki/load404e.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"cpp/language/declarations","wgTitle":"cpp/language/declarations","wgCurRevisionId":66694,"wgArticleId":9896,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"cpp/language/declarations","wgRestrictionEdit":[],"wgRestrictionMove":[]});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":0,"showtoolbar":1,"skin":"cppreference2","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,
"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"gadget-ColiruCompiler":1});;},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});;},{},{});
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-js:7:ca03345b1e2c4d90a25d968753a73b92 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000dd;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #909090;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es1 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es2 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es3 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es4 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es5 {color: #008000; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #008000;}
.cpp.source-cpp .nu0 {color: #000080;}
.cpp.source-cpp .nu6 {color: #000080;}
.cpp.source-cpp .nu8 {color: #000080;}
.cpp.source-cpp .nu12 {color: #000080;}
.cpp.source-cpp .nu16 {color:#000080;}
.cpp.source-cpp .nu17 {color:#000080;}
.cpp.source-cpp .nu18 {color:#000080;}
.cpp.source-cpp .nu19 {color:#000080;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-cpp_language_declarations skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        <div id="mw-head" class="noprint">
            <div id="cpp-head-first-base">
                <div id="cpp-head-first">
                    <h5><a href="../../../index.html">
                        cppreference.com                        </a></h5>
                    <div id="cpp-head-search">
                        
<!-- 0 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://en.cppreference.com/mwiki/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<div id="simpleSearch">
						<input name="search" title="Search cppreference.com [f]" accesskey="f" id="searchInput" />						<button type="submit" name="button" title="Search the pages for this text" id="searchButton"><img src="../../../mwiki/skins/cppreference2/images/search-ltr11b9.png?303" alt="Search" /></button>					</div>
			</form>
</div>

<!-- /0 -->
                    </div>
                    <div id="cpp-head-personal">
                        
<!-- 0 -->
<div id="p-personal" class="">
<span id="pt-createaccount"><a href="http://en.cppreference.com/mwiki/index.php?title=Special:UserLogin&amp;returnto=cpp%2Flanguage%2Fdeclarations&amp;type=signup">Create account</a></span>	<div class="menu">
        <ul>
<li id="pt-login"><a href="http://en.cppreference.com/mwiki/index.php?title=Special:UserLogin&amp;returnto=cpp%2Flanguage%2Fdeclarations" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>        </ul>
    </div>
</div>

<!-- /0 -->
                    </div>

                </div>
            </div>
            <div id="cpp-head-second-base">
                <div id="cpp-head-second">
                    <div id="cpp-head-tools-left">
                        
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="declarations"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/language/declarations&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
                    </div>
                    <div id="cpp-head-tools-right">
                        
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="declarations" >View</a></span></li>
					<li id="ca-edit"><span><a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=edit"  title="You can edit this page. Please use the preview button before saving [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
                    </div>
                </div>
            </div>
        </div>
        <!-- /header -->
        <!-- content -->
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->
                <h1 id="firstHeading" class="firstHeading">Declarations</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    <div id="siteSub">From cppreference.com</div>
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    <div id="contentSub"><span class="subpages">&lt; <a href="../../cpp.html" title="cpp">cpp</a>&lrm; | <a href="../language.html" title="cpp/language">language</a></span></div>
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="t-navbar" style=""><div class="t-navbar-sep">&#160;</div><div class="t-navbar-head"><a href="../../cpp.html" title="cpp"> C++</a><div class="t-navbar-menu"><div><div><table class="t-nv-begin" cellpadding="0" style="line-height:1.1em;">
<tr class="t-nv"><td colspan="5"> <a href="../language.html" title="cpp/language"> Language</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../header.html" title="cpp/header"> Standard library headers</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../concept.html" title="cpp/concept"> Concepts</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../utility.html" title="cpp/utility"> Utilities library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../string.html" title="cpp/string"> Strings library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../container.html" title="cpp/container"> Containers library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../algorithm.html" title="cpp/algorithm"> Algorithms library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../iterator.html" title="cpp/iterator"> Iterators library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../numeric.html" title="cpp/numeric"> Numerics library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../io.html" title="cpp/io"> Input/output library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../locale.html" title="cpp/locale"> Localizations library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../regex.html" title="cpp/regex"> Regular expressions library</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../atomic" title="cpp/atomic"> Atomic operations library</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../thread.html" title="cpp/thread"> Thread support library</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span> </td></tr>
</table></div><div><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="http://en.cppreference.com/mwiki/index.php?title=Template:cpp/navbar_content&amp;action=edit">&#91;edit&#93;</a></span></div></div></div></div><div class="t-navbar-sep">&#160;</div><div class="t-navbar-head"><a href="../language.html" title="cpp/language"> C++ language</a><div class="t-navbar-menu"><div><div style="display:inline-block">
<div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv-h1"><td colspan="5"> General topics</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="../preprocessor.html" title="cpp/preprocessor"> Preprocessor</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../comment.html" title="cpp/comment"> Comments</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="../keyword.html" title="cpp/keyword"> Keywords</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="ascii.html" title="cpp/language/ascii"> ASCII chart</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="escape.html" title="cpp/language/escape"> Escape sequences</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="history.html" title="cpp/language/history"> History of C++</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Flow control</td></tr>
<tr class="t-nv-h2"><td colspan="5"> Conditional execution statements</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="if.html" title="cpp/language/if"> <code>if</code> statement</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="switch.html" title="cpp/language/switch"> <code>switch</code> statement</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Iteration statements</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="for.html" title="cpp/language/for"> <code>for</code> loop</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="range-for.html" title="cpp/language/range-for"> range-<code>for</code> loop</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="while.html" title="cpp/language/while"> <code>while</code> loop</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="do.html" title="cpp/language/do"> <code>do-while</code> loop</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Jump statements </td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="continue.html" title="cpp/language/continue"> <code>continue</code> statement</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="break.html" title="cpp/language/break"> <code>break</code> statement</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="goto.html" title="cpp/language/goto"> <code>goto</code> statement</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="return.html" title="cpp/language/return"> <code>return</code> statement</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Functions</td></tr>
<tr class="t-nv"><td colspan="5"> <a href="function.html" title="cpp/language/function"> function declaration</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="lambda.html" title="cpp/language/lambda"> lambda function declaration</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="function_template.html" title="cpp/language/function template"> function template </a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="inline.html" title="cpp/language/inline"> inline specifier</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="except_spec.html" title="cpp/language/except spec"> exception specifications</a> <span class="t-mark">(deprecated)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="noexcept_spec.html" title="cpp/language/noexcept spec"> noexcept specifier</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Exceptions</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="throw.html" title="cpp/language/throw"> throw expression</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="try_catch.html" title="cpp/language/try catch"> try-catch block</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Namespaces</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="namespace.html" title="cpp/language/namespace"> namespace declaration</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="namespace_alias.html" title="cpp/language/namespace alias"> namespace aliases</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Types</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="types.html" title="cpp/language/types"> fundamental types</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="class.html" title="cpp/language/class"> compound types</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="enum.html" title="cpp/language/enum"> enumeration types</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="union.html" title="cpp/language/union"> union types</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="function.html" title="cpp/language/function"> function types</a></td></tr>
</table></div></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="decltype.html" title="cpp/language/decltype"> <code>decltype</code> specifier</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Specifiers</td></tr>
<tr class="t-nv"><td colspan="5"> <a href="cv.html" title="cpp/language/cv"> cv specifiers</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="storage_duration.html" title="cpp/language/storage duration"> storage duration specifiers</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="constexpr.html" title="cpp/language/constexpr"> constexpr specifier</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="auto.html" title="cpp/language/auto"> auto specifier</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="alignas.html" title="cpp/language/alignas"> alignas specifier</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Initialization</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="default_initialization.html" title="cpp/language/default initialization"> default initialization</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="value_initialization.html" title="cpp/language/value initialization"> value initialization</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="zero_initialization.html" title="cpp/language/zero initialization"> zero initialization</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="copy_initialization" title="cpp/language/copy initialization"> copy initialization</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="direct_initialization.html" title="cpp/language/direct initialization"> direct initialization</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="aggregate_initialization.html" title="cpp/language/aggregate initialization"> aggregate initialization</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="list_initialization.html" title="cpp/language/list initialization"> list initialization</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="constant_initialization.html" title="cpp/language/constant initialization">constant initialization</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="reference_initialization.html" title="cpp/language/reference initialization">reference initialization</a></td></tr>
</table></div></td></tr>
</table></div>
</div>
<div style="display:inline-block">
<div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv-h2"><td colspan="5"> Literals</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="integer_literal.html" title="cpp/language/integer literal"> integer literals</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="character_literal.html" title="cpp/language/character literal"> character literals</a></td></tr> 
<tr class="t-nv"><td colspan="5"> <a href="floating_literal.html" title="cpp/language/floating literal"> floating-point literals</a></td></tr>  
<tr class="t-nv"><td colspan="5"> <a href="string_literal.html" title="cpp/language/string literal"> string literals</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="bool_literal.html" title="cpp/language/bool literal"> boolean literals</a></td></tr>   
<tr class="t-nv"><td colspan="5"> <a href="nullptr.html" title="cpp/language/nullptr"> nullptr</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="user_literal.html" title="cpp/language/user literal"> user-defined</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
</table></div></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Expressions</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="value_category.html" title="cpp/language/value category"> value categories</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="eval_order.html" title="cpp/language/eval order"> order of evaluation</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="operators.html" title="cpp/language/operators"> operators</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="operator_precedence.html" title="cpp/language/operator precedence"> operator precedence</a></td></tr>
</table></div></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="operator_alternative.html" title="cpp/language/operator alternative"> alternative representations</a></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Utilities</td></tr>
<tr class="t-nv-h2"><td colspan="5"> Types</td></tr>
<tr class="t-nv"><td colspan="5"> <a href="typedef.html" title="cpp/language/typedef"> <code>typedef</code> declaration</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="type_alias.html" title="cpp/language/type alias"> type alias declaration</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="attributes.html" title="cpp/language/attributes"> attributes</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Casts</td></tr>
<tr class="t-nv"><td colspan="5"> <a href="implicit_cast.html" title="cpp/language/implicit cast"> implicit conversions</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="const_cast.html" title="cpp/language/const cast"> <code>const_cast</code> conversion</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="static_cast.html" title="cpp/language/static cast"> <code>static_cast</code> conversion</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="dynamic_cast.html" title="cpp/language/dynamic cast"> <code>dynamic_cast</code> conversion</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="reinterpret_cast.html" title="cpp/language/reinterpret cast"> <code>reinterpret_cast</code> conversion</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="explicit_cast.html" title="cpp/language/explicit cast"> C-style and functional cast</a></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Memory allocation</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="new.html" title="cpp/language/new"> <code>new</code> expression</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="delete.html" title="cpp/language/delete"> <code>delete</code> expression</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Classes</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="class.html" title="cpp/language/class"> class declaration</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="this.html" title="cpp/language/this"> <code>this</code> pointer</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="access.html" title="cpp/language/access"> access specifiers</a></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="friend.html" title="cpp/language/friend"> friend specifier</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="initializer_list.html" title="cpp/language/initializer list"> initializer lists</a> </td></tr>
</table></div></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Class-specific function properties</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="virtual.html" title="cpp/language/virtual"> virtual function</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="override.html" title="cpp/language/override"> override specifier</a>  <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="final.html" title="cpp/language/final"> final specifier</a>  <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="explicit.html" title="cpp/language/explicit"> explicit</a>  <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="static.html" title="cpp/language/static"> static</a> </td></tr>
</table></div></td></tr>
<tr class="t-nv-h2"><td colspan="5"> Special member functions</td></tr>
<tr class="t-nv-col-table"><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="default_constructor.html" title="cpp/language/default constructor"> default constructor</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="copy_constructor.html" title="cpp/language/copy constructor"> copy constructor</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="move_constructor.html" title="cpp/language/move constructor"> move constructor</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
</table></div></td><td><div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="as_operator.html" title="cpp/language/as operator"> copy assignment</a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="move_operator.html" title="cpp/language/move operator"> move assignment</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="destructor.html" title="cpp/language/destructor"> destructor</a></td></tr>
</table></div></td></tr>
<tr class="t-nv-h1"><td colspan="5">Templates </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="class_template.html" title="cpp/language/class template"> class template </a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="function_template.html" title="cpp/language/function template"> function template </a></td></tr>
<tr class="t-nv"><td colspan="5"> <a href="template_specialization.html" title="cpp/language/template specialization"> template specialization</a></td></tr>   
<tr class="t-nv"><td colspan="5"> <a href="parameter_pack.html" title="cpp/language/parameter pack"> parameter packs</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span></td></tr>
<tr class="t-nv-h1"><td colspan="5"> Miscellaneous </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="asm.html" title="cpp/language/asm"> Inline assembly</a></td></tr>
</table></div>
</div><div><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="http://en.cppreference.com/mwiki/index.php?title=Template:cpp/language/navbar_content&amp;action=edit">&#91;edit&#93;</a></span></div></div></div></div><div class="t-navbar-sep">&#160;</div></div>
<p><i>Declarations</i> introduce (or re-introduce) names into the C++ program. Each kind of entity is declared differently. <a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/definition&amp;action=edit&amp;redlink=1" class="new" title="cpp/language/definition (page does not exist)">Definitions</a> are declarations that are sufficient to use the entity identified by the name. 
</p><p>A declaration is one of the following:
</p>
<ul><li> <a href="function.html" title="cpp/language/function">Function declaration</a>
</li><li> Template declaration (<a href="class_template.html" title="cpp/language/class template">class</a> or <a href="function_template.html" title="cpp/language/function template">function</a>)
</li><li> <a href="class_template.html#Explicit_instantiation" title="cpp/language/class template">Explicit template instantiation</a>
</li><li> <a href="template_specialization.html" title="cpp/language/template specialization">Explicit template specialization</a>
</li><li> <a href="namespace.html" title="cpp/language/namespace">Namespace definition</a>
</li><li> <a href="language_linkage.html" title="cpp/language/language linkage">Linkage specification</a>
</li><li> Attribute declaration (<span class="t-spar"><a href="attributes.html" title="cpp/language/attributes">attr</a></span> <code><b>;</b></code>) <span class="t-mark-rev t-since-cxx11">(since C++11)</span>
</li><li> Empty declaration (<code><b>;</b></code>)
</li><li> Block declaration (a declaration that can appear inside a <a href="statements.html#Compound_statement" title="cpp/language/statements">block</a>), which, in turn, can be one of the following:
</li></ul>
<dl><dd><ul><li><a href="asm.html" title="cpp/language/asm">asm definition</a>
</li><li><a href="type_alias.html" title="cpp/language/type alias">type alias declaration</a>
</li><li><a href="namespace_alias.html" title="cpp/language/namespace alias">namespace alias definition</a>
</li><li><a href="using_declaration.html" title="cpp/language/using declaration">using declaration</a> 
</li><li><a href="namespace.html" title="cpp/language/namespace">using directive</a>
</li><li><a href="static_assert.html" title="cpp/language/static assert">static_assert</a> declaration
</li><li><a href="enum.html" title="cpp/language/enum">opaque enum declaration</a>
</li><li>simple declaration
</li></ul>
</dd></dl>
<p>Simple declaration is a statement that introduces, creates, and optionally initializes one or several identifiers, typically variables.
</p>
<table class="t-sdsc-begin">

<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">attr</span><span class="t-mark">(optional)</span> <span class="t-spar">decl-specifier-seq</span><span class="t-mark">(optional)</span> <span class="t-spar">init-declarator-list</span><span class="t-mark">(optional)</span> <code><b>;</b></code>
</td>
<td> (1)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></table>
<table class="t-par-begin">


<tr class="t-par">
<td>  <span class="t-spar">attr</span><span class="t-mark-rev t-since-cxx11">(C++11)</span>
</td>
<td> -
</td>
<td>  optional sequence of any number of <a href="attributes.html" title="cpp/language/attributes">attributes</a>
</td></tr>
<tr class="t-par">
<td>  <span class="t-spar">decl-specifier-seq</span>
</td>
<td> -
</td>
<td>  sequence of type specifiers including the type name. It is only optional in the declarations of constructors, destructors, and user-defined type <a href="cast_operator.html" title="cpp/language/cast operator">conversion functions</a>
</td></tr>
<tr class="t-par">
<td>  <span class="t-spar">init-declarator-list</span>
</td>
<td> -
</td>
<td>  comma-separated list of <i>declarators</i> with optional <i>initializers</i>. Init-declarator-list is optional when declaring a named class/struct/union or a named enumeration
</td></tr></table>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Specifiers"><span class="tocnumber">1</span> <span class="toctext">Specifiers</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Declarators"><span class="tocnumber">2</span> <span class="toctext">Declarators</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Notes"><span class="tocnumber">3</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Examples"><span class="tocnumber">4</span> <span class="toctext">Examples</span></a></li>
</ul>
</td></tr></table>
<h3><span class="editsection">[<a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=edit&amp;section=1" title="Edit section: Specifiers">edit</a>]</span> <span class="mw-headline" id="Specifiers">Specifiers</span></h3>
<p><span class="t-spar">decl-specifier-seq</span> is a sequence of the following whitespace-separated specifiers:
</p>
<ul><li> <a href="typedef.html" title="cpp/language/typedef">typedef specifier</a>. If present, the entire declaration is a <a href="typedef.html" title="cpp/language/typedef">typedef declaration</a> and each declarator introduces a new type name, not an object or a function.
</li><li> function specifier (<a href="../keyword/inline.html" title="cpp/keyword/inline">inline</a>, <a href="../keyword/virtual.html" title="cpp/keyword/virtual">virtual</a>, <a href="../keyword/explicit.html" title="cpp/keyword/explicit">explicit</a>), only allowed in <a href="function.html" title="cpp/language/function">function declarations</a>
</li><li> <a href="friend.html" title="cpp/language/friend">friend specifier</a>, allowed in class and function declarations.
</li><li> <a href="constexpr.html" title="cpp/language/constexpr">constexpr specifier</a>, only allowed in variable definitions, function and function template declarations, and the declaration of static data members of literal type.
</li><li> <a href="storage_duration.html" title="cpp/language/storage duration">storage class specifier</a> (<a href="../keyword/register.html" title="cpp/keyword/register">register</a>, <a href="../keyword/static.html" title="cpp/keyword/static">static</a>, <a href="../keyword/thread_local" title="cpp/keyword/thread local">thread_local</a> <span class="t-mark-rev t-since-cxx11">(since C++11)</span>, <a href="../keyword/extern.html" title="cpp/keyword/extern">extern</a>, <a href="../keyword/mutable.html" title="cpp/keyword/mutable">mutable</a>). Only one storage class specifier is allowed, except that <code>thread_local</code> may appear together with <code>extern</code> or <code>static</code>.
</li><li> type specifier sequence, which can be any one of the following:
</li></ul>
<dl><dd><ul><li> <a href="class.html" title="cpp/language/class">class specifier</a>
</li><li> <a href="enum.html" title="cpp/language/enum">enum specifier</a>
</li><li> simple type specifier
</li></ul>
<dl><dd><ul><li><a href="../keyword/char.html" title="cpp/keyword/char">char</a>, <a href="../keyword/char16_t.html" title="cpp/keyword/char16 t">char16_t</a>. <a href="../keyword/char32_t.html" title="cpp/keyword/char32 t">char32_t</a>, <a href="../keyword/wchar_t.html" title="cpp/keyword/wchar t">wchar_t</a>, <a href="../keyword/bool" title="cpp/keyword/bool">bool</a>, <a href="../keyword/short.html" title="cpp/keyword/short">short</a>, <a href="../keyword/int.html" title="cpp/keyword/int">int</a>, <a href="../keyword/long.html" title="cpp/keyword/long">long</a>, <a href="../keyword/signed.html" title="cpp/keyword/signed">signed</a>, <a href="../keyword/unsigned.html" title="cpp/keyword/unsigned">unsigned</a>, <a href="../keyword/float.html" title="cpp/keyword/float">float</a>, <a href="../keyword/double.html" title="cpp/keyword/double">double</a>, <a href="../keyword/void.html" title="cpp/keyword/void">void</a>, <a href="../keyword/auto.html" title="cpp/keyword/auto">auto</a>
</li><li><a href="decltype.html" title="cpp/language/decltype">decltype specifier</a>
</li><li> previously declared class name (optionally <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">qualified</a>)
</li><li> previously declared enum name (optionally <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">qualified</a>)
</li><li> previously declared typedef-name or type alias (optionally <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">qualified</a>)
</li><li> template name with template arguments (optionally <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">qualified</a>, optionally using <a href="dependent_name.html" title="cpp/language/dependent name">template disambiguator</a>)
</li></ul>
</dd></dl>
<ul><li> elaborated type specifier
</li></ul>
<dl><dd><ul><li> the keyword <a href="../keyword/class.html" title="cpp/keyword/class">class</a>, <a href="../keyword/struct.html" title="cpp/keyword/struct">struct</a>, or <a href="../keyword/union.html" title="cpp/keyword/union">union</a>, followed by the identifier (optionally <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">qualified</a>)), previously defined as the name of a class, struct, or union.
</li><li> the keyword <a href="../keyword/class.html" title="cpp/keyword/class">class</a>, <a href="../keyword/struct.html" title="cpp/keyword/struct">struct</a>, or <a href="../keyword/union.html" title="cpp/keyword/union">union</a>, followed by template name with template arguments (optionally <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">qualified</a>), optionally using <a href="dependent_name.html" title="cpp/language/dependent name">template disambiguator</a>), previously defined as the name of a class template.
</li><li> the keyword <a href="../keyword/enum.html" title="cpp/keyword/enum">enum</a> followed by the identifier (optionally <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">qualified</a>)), previously defined as the name of an enumeration.
</li></ul>
</dd></dl>
<ul><li> <a href="dependent_name.html" title="cpp/language/dependent name">typename specifier</a>
</li><li> <a href="cv.html" title="cpp/language/cv">cv qualifier</a>
</li></ul>
</dd><dd>only one type specifier is allowed in a decl-specifier-seq, with the following exceptions:
</dd><dd>- <code>const</code> can be combined with any type specifier except itself.
</dd><dd>- <code>volatile</code> can be combined with any type specifier except itself.
</dd><dd>- <code>signed</code> or <code>unsigned</code> can be combined with <code>char</code>, <code>long</code>, <code>short</code>, or <code>int</code>.
</dd><dd>- <code>short</code> or <code>long</code> can be combined with <code>int</code>.
</dd><dd>- <code>long</code> can be combined with <code>double</code>.
</dd></dl>
<p><a href="attributes.html" title="cpp/language/attributes">Attributes</a> may appear in decl-specifier-seq, in which case they apply to the type determined by the preceding specifiers.
</p>
<h3><span class="editsection">[<a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=edit&amp;section=2" title="Edit section: Declarators">edit</a>]</span> <span class="mw-headline" id="Declarators">Declarators</span></h3>
<p><span class="t-spar">init-declarator-seq</span> is a comma-separated sequence of one or more <span class="t-spar">init-declarators</span>, which have the following syntax:
</p>
<table class="t-sdsc-begin">

<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">declarator</span> <span class="t-spar">initializer</span><span class="t-mark">(optional)</span>
</td>
<td> (1)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></table>
<table class="t-par-begin">


<tr class="t-par">
<td>  <span class="t-spar">declarator</span>
</td>
<td> -
</td>
<td>  the declarator
</td></tr>
<tr class="t-par">
<td>  <span class="t-spar">initializer</span>
</td>
<td> -
</td>
<td>  optional initializer (except where required, such as when initializing references or const objects). See <a href="initialization.html" title="cpp/language/initialization">Initialization</a> for details.
</td></tr></table>
<p>Each <span class="t-spar">init-declaractor</span> in a init-declarator sequence <span class="t-c"><span class="mw-geshi cpp source-cpp">S D1, D2, D3<span class="sy4">;</span></span></span> is processed as if it were a standalone declaration with the same specifiers: <span class="t-c"><span class="mw-geshi cpp source-cpp">S D1<span class="sy4">;</span> S D2<span class="sy4">;</span> S D3<span class="sy4">;</span></span></span>.
</p><p>Each declarator introduces exactly one object, function, or (for typedef declarations) type alias, whose type is provided by <span class="t-spar">decl-specifier-seq</span> and optionally modified by operators such as <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="sy3">&amp;</span></span></span> (reference to) or <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="br0">&#91;</span><span class="br0">&#93;</span></span></span> (array of) or <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="br0">&#40;</span><span class="br0">&#41;</span></span></span> (function returning) in the declarator. These operators can be applied recursively, as shown below,
</p><p>A <span class="t-spar">declarator</span> is one of the following:
</p>
<table class="t-sdsc-begin">

<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">identifier</span> <span class="t-spar">attr</span><span class="t-mark">(optional)</span>
</td>
<td> (1)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>...</b></code> <span class="t-spar">identifier</span> <span class="t-spar">attr</span><span class="t-mark">(optional)</span>
</td>
<td> (2)
</td>
<td> <span class="t-mark-rev t-since-cxx11">(since C++11)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>*</b></code> <span class="t-spar">attr</span><span class="t-mark">(optional)</span> <span class="t-spar">cv</span><span class="t-mark">(optional)</span> <span class="t-spar">declarator</span>
</td>
<td> (3)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">nested-name-specifier</span> <code><b>*</b></code> <span class="t-spar">attr</span><span class="t-mark">(optional)</span> <span class="t-spar">cv</span><span class="t-mark">(optional)</span> <span class="t-spar">declarator</span>
</td>
<td> (4)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>&amp;</b></code> <span class="t-spar">attr</span><span class="t-mark">(optional)</span> <span class="t-spar">declarator</span>
</td>
<td> (5)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <code><b>&amp;&amp;</b></code> <span class="t-spar">attr</span><span class="t-mark">(optional)</span> <span class="t-spar">declarator</span>
</td>
<td> (6)
</td>
<td> <span class="t-mark-rev t-since-cxx11">(since C++11)</span>
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">noptr-declarator</span> <code><b>[</b></code> <span class="t-spar">constexpr</span><span class="t-mark">(optional)</span> <code><b>]</b></code> <span class="t-spar">attr</span><span class="t-mark">(optional)</span>
</td>
<td> (7)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr>
<tr class="t-sdsc">
<td> <span class="t-spar">noptr-declarator</span> <code><b>(</b></code> <span class="t-spar">parameter-list</span> <code><b>)</b></code> <span class="t-spar">attr</span><span class="t-mark">(optional)</span> <span class="t-spar">cv</span><span class="t-mark">(optional)</span> <span class="t-spar">ref</span><span class="t-mark">(optional)</span> <span class="t-spar">except</span>
</td>
<td> (8)
</td>
<td class="t-sdsc-nopad">
</td></tr>



<tr>
<td colspan="10" class="t-sdsc-sep">
</td></tr></table>
<div class="t-li1"><span class="t-li">1)</span> The identifier that is declared. A declarator that consist of just an identifier, declares an object of exactly the type provided by <span class="t-spar">decl-specifier-seq</span>.</div>
<div class="t-li1"><span class="t-li">2)</span> <a href="parameter_pack.html" title="cpp/language/parameter pack">Parameter pack</a>, only appears in function parameter lists for variadic function templates.</div>
<div class="t-li1"><span class="t-li">3)</span> <a href="pointer.html" title="cpp/language/pointer">Pointer declarator</a>: the declaration <span class="t-c"><span class="mw-geshi cpp source-cpp">S <span class="sy2">*</span> D<span class="sy4">;</span></span></span> declares <code>D</code> as a pointer to the type determined by <span class="t-spar">decl-specifier-seq</span> <code>S</code>.</div>
<div class="t-li1"><span class="t-li">4)</span> <a href="pointer.html" title="cpp/language/pointer">Pointer to member declaration</a>: the declaration <span class="t-c"><span class="mw-geshi cpp source-cpp">S C<span class="sy4">::</span><span class="sy2">*</span>D<span class="sy4">;</span></span></span> declares <code>D</code> as a pointer to member of <code>C</code> of type determined by <span class="t-spar">decl-specifier-seq</span> <code>S</code>. <span class="t-spar">nested-name-specifier</span> is a <a href="identifiers.html#Qualified_identifiers" title="cpp/language/identifiers">sequence of names and scope resolution operators <code><b>::</b></code></a></div>
<div class="t-li1"><span class="t-li">5)</span> <a href="reference" title="cpp/language/reference">Lvalue reference declarator</a>: the declaration <span class="t-c"><span class="mw-geshi cpp source-cpp">S <span class="sy3">&amp;</span> D<span class="sy4">;</span></span></span> declares the object <code>D</code> with type lvalue reference to the type determined by <span class="t-spar">decl-specifier-seq</span> <code>S</code>.</div>
<div class="t-li1"><span class="t-li">6)</span> <a href="reference" title="cpp/language/reference">Rvalue reference declarator</a>: the declaration <span class="t-c"><span class="mw-geshi cpp source-cpp">S <span class="sy3">&amp;&amp;</span> D<span class="sy4">;</span></span></span> declares the object <code>D</code> with type rvalue reference to the type determined by <span class="t-spar">decl-specifier-seq</span> <code>S</code>.</div>
<div class="t-li1"><span class="t-li">7)</span> <a href="array.html" title="cpp/language/array">Array declarator</a>. <span class="t-spar">noptr-declarator</span> any valid declarator, but if it begins with *, &amp;, or &amp;&amp;, it has to be surrounded by parentheses.</div>
<div class="t-li1"><span class="t-li">8)</span> <a href="function.html" title="cpp/language/function">Function declarator</a>. <span class="t-spar">noptr-declarator</span> any valid declarator, but if it begins with *, &amp;, or &amp;&amp;, it has to be surrounded by parentheses. Note that the outermost function declarator may end with the optional trailing return type. </div>
<p>In all cases, <span class="t-spar">attr</span> is an optional sequence of <a href="attributes.html" title="cpp/language/attributes">attributes</a>. When appearing immediately after the identifier, it applies to the object being declared.
</p>
<h3><span class="editsection">[<a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=edit&amp;section=3" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline" id="Notes">Notes</span></h3>
<p>When a block declaration appears <a href="statements.html#Compound_statement" title="cpp/language/statements">inside a block</a>, and an identifier introduced by a declaration was previously declared in an outer block, the <a href="scope.html" title="cpp/language/scope">outer declaration is hidden</a> for the remainder of the block. 
</p><p>If a declaration introduces a variable with automatic storage duration, it is initialized when its declaration statement is executed. All automatic variables declared in a block are destroyed on exit from the block (regardless how the block is exited: via <a href="exceptions.html" title="cpp/language/exceptions">exception</a>, <a href="goto.html" title="cpp/language/goto">goto</a>, or by reaching its end), in order opposite to their order of initialization.
</p>
<h3><span class="editsection">[<a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=edit&amp;section=4" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline" id="Examples">Examples</span></h3>
<div class="t-example"><div class="t-example-live-link"><div class="coliru-btn coliru-btn-run-init">Run this code</div></div>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw1">class</span> C <span class="br0">&#123;</span>
    <a href="../string/basic_string.html"><span class="kw1045">std::<span class="me2">string</span></span></a> member<span class="sy4">;</span> <span class="co1">// decl-specifier-seq is &quot;std::string&quot;</span>
                        <span class="co1">// declarator is &quot;member&quot;</span>
<span class="br0">&#125;</span> obj, <span class="sy2">*</span>pObj<span class="br0">&#40;</span><span class="sy3">&amp;</span>obj<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="co1">// decl-specifier-seq is &quot;class C { std::string member; }&quot;</span>
<span class="co1">// declarator &quot;obj&quot; defines an object of type C</span>
<span class="co1">// declarator &quot;*pObj(&amp;obj)&quot; declares and initializes a pointer to C</span>
&#160;
<span class="kw4">int</span> a <span class="sy1">=</span> <span class="nu0">1</span>, <span class="sy2">*</span>p <span class="sy1">=</span> <a href="../types/NULL.html"><span class="kw103">NULL</span></a>, f<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="br0">&#40;</span><span class="sy2">*</span>pf<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="co1">// decl-specifier-seq is int</span>
<span class="co1">// declarator a=1 defines and initializes a variable of type int</span>
<span class="co1">// declarator *p=NULL defines and initializes a variable of type int*</span>
<span class="co1">// declarator (f)() declares (but doesn't define)</span>
<span class="co1">//                  a function taking no arguments and returning int</span>
<span class="co1">// declarator (*pf)(double) defines a pointer to function</span>
<span class="co1">//                  taking double and returning int</span>
&#160;
<span class="kw4">int</span> <span class="br0">&#40;</span><span class="sy2">*</span><span class="br0">&#40;</span><span class="sy2">*</span>foo<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy1">=</span> <a href="../types/NULL.html"><span class="kw103">NULL</span></a><span class="sy4">;</span>
<span class="co1">// decl-specifier-seq is int</span>
<span class="co1">// 1. declarator &quot;(*(*foo)(double))[3]&quot; is an array declarator:</span>
<span class="co1">//    the type declared is &quot;/nested declarator/ array of 3 int&quot;</span>
<span class="co1">// 2. the nested declarator is &quot;*(*foo)(double))&quot;, which is a pointer declarator</span>
<span class="co1">//    the type declared is &quot;/nested declarator/ pointer to array of 3 int&quot;</span>
<span class="co1">// 3. the nested declarator is &quot;(*foo)(double)&quot;, which is a function declarator</span>
<span class="co1">//    the type declared is &quot;/nested declarator/ function taking double and returning</span>
<span class="co1">//        pointer to array of 3 int&quot;</span>
<span class="co1">// 4. the nested declarator is &quot;(*foo)&quot; which is a (parenthesized, as required by</span>
<span class="co1">//        function declarator syntax) pointer declarator.</span>
<span class="co1">//    the type declared is &quot;/nested declarator/ pointer to function taking double</span>
<span class="co1">//        and returning pointer to array of 3 int&quot;</span>
<span class="co1">// 5. the nested declarator is &quot;foo&quot;, which is an identifier.</span>
<span class="co1">// The declaration declares the object foo of type &quot;pointer to function taking double </span>
<span class="co1">//     and returning pointer to array of 3 int&quot;</span>
<span class="co1">// The initializer &quot;= NULL&quot; provides the initial value of this pointer.</span></pre></div></div>
<p><br /> 
</p>
</div>

<!-- 
NewPP limit report
Preprocessor visited node count: 3192/1000000
Preprocessor generated node count: 7403/1000000
Post‐expand include size: 114641/2097152 bytes
Template argument size: 20939/2097152 bytes
Highest expansion depth: 13/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:9896-0!*!0!!en!*!* and timestamp 20140103183226 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;oldid=66694">http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;oldid=66694</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id='catlinks' class='catlinks catlinks-allhidden'></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        <div id="cpp-footer-base" class="noprint">
            <div id="footer">
                        <div id="cpp-navigation">
            <h5>Navigation</h5>
            <ul>
<li id="n-recentchanges"><a href="http://en.cppreference.com/w/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-FAQ"><a href="http://en.cppreference.com/w/Cppreference:FAQ">FAQ</a></li><li id="n-Store"><a href="http://www.cppreference.com/store" rel="nofollow">Store</a></li><li id="n-Offline-version"><a href="http://en.cppreference.com/w/Cppreference:Archives">Offline version</a></li>            </ul>
        </div>
                        <div id="cpp-toolbox">
            <h5><span>Toolbox</span><a href="#"></a></h5>
            <ul>
<li id="t-whatlinkshere"><a href="http://en.cppreference.com/w/Special:WhatLinksHere/cpp/language/declarations" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="http://en.cppreference.com/w/Special:RecentChangesLinked/cpp/language/declarations" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="http://upload.cppreference.com/w/Special:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="http://en.cppreference.com/w/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-print"><a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li><li id="t-permalink"><a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;oldid=66694" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/declarations&amp;action=info">Page information</a></li>            </ul>
        </div>
                            <ul id="footer-info">
                                    <li id="footer-info-lastmod"> This page was last modified on 26 December 2013, at 08:39.</li>
                                    <li id="footer-info-viewcount">This page has been accessed 1,950 times.</li>
                            </ul>
                    <ul id="footer-places">
                                    <li id="footer-places-privacy"><a href="http://en.cppreference.com/w/Cppreference:Privacy_policy" title="Cppreference:Privacy policy">Privacy policy</a></li>
                                    <li id="footer-places-about"><a href="http://en.cppreference.com/w/Cppreference:About" title="Cppreference:About">About cppreference.com</a></li>
                                    <li id="footer-places-disclaimer"><a href="http://en.cppreference.com/w/Cppreference:General_disclaimer" title="Cppreference:General disclaimer">Disclaimers</a></li>
                            </ul>
                                    <ul id="footer-icons" class="noprint">
                                    <li id="footer-poweredbyico">
                                            <a href="http://www.mediawiki.org/"><img src="../../../mwiki/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>                                            <a href="http://qbnz.com/highlighter/"><img src="../../../../upload.cppreference.com/mwiki/images/2/2b/powered_by_geshi_88x31.png" alt="Powered by GeSHi" height="31" width="88" /></a>                                            <a href="http://www.tigertech.net/referral/cppreference.com"><img src="../../../../upload.cppreference.com/mwiki/images/9/94/powered_by_tigertech_88x31.png" alt="Hosted by Tiger Technologies" height="31" width="88" /></a>                                        </li>
                                </ul>
                        <div style="clear:both">
            </div>
            </div>
        </div>
        <!-- /footer -->
        <script>if(window.mw){
mw.loader.state({"site":"loading","user":"missing","user.groups":"ready"});
}</script>
<script src="../../../mwiki/loadac2a.php?debug=false&amp;lang=en&amp;modules=skins.cppreference2&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.page.ready","mediawiki.searchSuggest","mediawiki.hidpi","ext.gadget.ColiruCompiler"], null, true);
}</script>
<script src="../../../mwiki/load345b.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-2828341-1']);
_gaq.push(['_setDomainName', 'cppreference.com']);
_gaq.push(['_trackPageview']);
</script><!-- Served in 2.754 secs. -->
	</body>
<!-- Cached 20140103183226 -->

<!-- Mirrored from en.cppreference.com/w/cpp/language/declarations by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 08 Feb 2014 15:07:13 GMT -->
</html>
